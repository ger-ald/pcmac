		PCMAC SOURCE DOCUMENTATION

1.FILELIST

	The list of the files belongig to the source system of the PCMAC
	assembler. There is some comment on every file about its content.

ERROR.C
	This file contains the error handling routines for the PCMAC.

PASS.C
	This file contains the compilation driver for the PCMAC. It handles
	the labels, the EQU lines, and makes decision wheter the line is a macro
	definition or not.

GENERATE.C
	This file contains the code generation functions for the PCMAC.
	Some functions also handle the file listing system.

FILE.C
	This is the lowest level file handler system. This part deals with
	the include and macros directives.

GETLINE.C
	This file contains the second lowest level source line handlers.
	This function returns lines that come from a file, or from a
	pushed macrobody. The higher level system need not to deal with the
	lines, where it came from.

INIT.C
	This file contains some initialisation routines for the PCMAC.

PCMAC.C
	This is the main file of the PCMAC. This file contains the main().

LIBGET.C
	This file contains the functions that read a macro library from a
	file given.

LIBMAK.C
	This file contains the functions that write the current macro set
	to the outputfile if the -K option was given.

STABLE.C
	This file contains the symbol table handlers for the PCMAC. This
	file also contains the hash functions that are used somwhere else as well.

VARS.C
	This file contains the global variable declarations.

OBJMAD.C
	This file contains the functions that generates the objectfile.

FUNCTYPE.H
	This file contains function type definitions.

PRIMITIV.C
	This file contains the function do_primitive(). This function
	compiles the directives and the primitive instructions like 'external',
	'db', 'dd'.

DEFINES.H
	This file contains the global constants as #defines.

EXPRESS.C
	This file contains the functions that evaluate an expression.

TFUNC.H
	This file defines some functions as macro. This is needed for not
	TURBOC and MSDOS compiler, because some functions are used which are
	unique to MSDOS and TURBOC.

TFUNC.C
	This file contains the functions that implement the not standard
	but TURBOC supported functions.

TYPES.H
	This file defines the global types.

UTILITS.C
	This file contains utilities.

VARS.H
	This file contains the variable definitions. It has to be used
	only when compiling with 'make'.


2.OBJECTFORMAT

Every objectfile starts with two magicbytes. These are 55h and
0AAh as the first two bytes of the file. The following part consists of blocks.

+----+----+----------+----------++----------+
OBJECTFILE:|55|AA|block1|block2|...|blockN|
+----+----+----------+----------++----------+

Every block starts with an identifier byte. This byte can be:
	81	CODE
	82	RELOC
	83	PUB
	84	EXTDEF
	85	EXTREF

This byte identifies the type of the block. The meanings:
	CODE	The block contains relocatable codebytes.
	RELOC	The block contains relocation information.
	PUB		The block defines public symbol.
	EXTDEF	The block defines external symbol.
	EXTREF	The block defines references to external symbols.

After this byte 2 bytes contain the length of the body of the block.
At the end of the block there is one byte exor checksum. This is an
exor sum only of the body.

+----+----+----+----...----+----+
BLOCK:|IDTF|LENGTH|BODY|EXOR|
+----+----+----+----...----+----+

The format of the body depends on the type of it.

CODE
	The body starts with a four-byte address. It is followed by a byte
	containing the number of the bytes that follow this one.

	+----+----+----+----+----+----....----+
	CODEBODY:|ADDRESS|NR|CODEBYTES|
	+----+----+----+----+----+----....----+

RELOC
	The body starts with a byte containing the number of the items. It is
	followed by the items. Every item contains a size descriptor. If this is
	zero, then the relocatable entity is word(2bytes), if this is F0h
	then that is doubleword(4bytes). This size descriptor is followed
	by the address of the entity.

	+----+----...----+
	RELOCBODY:|NR|ITEMS|
	+----+----...----+

	+----+----+----+----+----+
	RELOCITEM:|SD|ADDRESS|
	+----+----+----+----+----+

PUB
	The body contains one byte relocation information. If this is zero, then
	the symbol is NOT relocatable, if this is F0h then the symbol IS
	relocatable. This byte is followed by the identifier(name) of the symbol
	which is a zero terminated ASCII string. There is a four byte value of
	the symbol following the terminating zero.

	+----+----...----+----+----+----+----+
	PUBBODY:|RI|NAME...\0|ADDRESS|
	+----+----...----+----+----+----+----+

EXTDEF
	The external symbol definition starts with the name of the external symbol.
	This is a zero terminated string. After the terminating zero there is
	a two byte referencenumber of the symbol. This referencenumber is unique
	in one objectfile, but cannot be unique in different objectfiles ofcourse.

	+----...----+----+----+
	EXTDEFBODY:|NAME...\0|REFNO|
	+----...----+----+----+

EXTREF
	The external references start with a byte containing the number of the items.
	After this byte there are the items. Every item contains a two-byte reference
	number, one byte reference type and four bytes address. The one byte reference
	type can be:
	1	BYTE
		The address points to a byte that has to be filled up by the linker.
	2	WORD
		The address points to a word that has to be filled up by the linker.
	4	DWORD
		The address points to a doubleword that has to be filled up by the linker.
	FE	RBYTE
		The address points to a byte that has to be filled up by the linker. This
		byte has to be filled up with a value that is the value of the symbol minus
		the address of the byte minus one. So the byte will contain a relative byte
		address.
	FD	RWORD
		The address points to a word that has to be filled up by the linker. This
		word has to be filled up with a value that is the value of the symbol minus
		the address of the word minus one. So the word will contain a relative word
		address.
	FB	RDWORD
		The address points to a doubleword that has to be filled up by the linker.
		This doubleword has to be filled up with a value that is the value of the
		symbol minus the address of the doubleword minus one. So the doubleword
		will contain a relative doubleword address.

	+----+----...----+
	EXTREFBODY:|NI|ITEMS|
	+----+----...----+

	+----+----+----+----+----+----+----+
	EXTREFITEM:|REFNO|RT|ADDRESS|
	+----+----+----+----+----+----+----+
